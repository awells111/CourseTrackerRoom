package com.android.awells.coursetrackerroom.data;

/**
 * Created by Owner on 1/11/2018.
 */

import android.arch.persistence.room.Database;
import android.arch.persistence.room.Room;
import android.arch.persistence.room.RoomDatabase;
import android.content.Context;
import android.support.annotation.VisibleForTesting;
/**
 * The Room database.
 */
@Database(entities = {Term.class, Course.class}, version = 1)
public abstract class CourseTrackerDatabase extends RoomDatabase {

    /**
     * @return The DAO for the Term table.
     */
    public abstract TermDao term();

    /**
     * @return The DAO for the Course table.
     */
    public abstract CourseDao course();

    /**
     * @return The DAO for the Note table.
     */
    public abstract NoteDao note();

    /**
     * @return The DAO for the Assessment table.
     */
    public abstract AssessmentDao assessment();

    /**
     * The only instance
     */
    private static CourseTrackerDatabase sInstance;

    /**
     * Gets the singleton instance of SampleDatabase.
     *
     * @param context The context.
     * @return The singleton instance of SampleDatabase.
     */
    public static synchronized CourseTrackerDatabase getInstance(Context context) {
        if (sInstance == null) {
            sInstance = Room
                    .databaseBuilder(context.getApplicationContext(), CourseTrackerDatabase.class, "TrackerDB")
                    .allowMainThreadQueries() //todo SHORT TERM SOLUTION JUST FOR THIS SCHOOL PROJECT
                    .build();
            sInstance.populateInitialData();
        }
        return sInstance;
    }

    /**
     * Switches the internal implementation with an empty in-memory database.
     *
     * @param context The context.
     */
    @VisibleForTesting
    public static void switchToInMemory(Context context) {
        sInstance = Room.inMemoryDatabaseBuilder(context.getApplicationContext(),
                CourseTrackerDatabase.class).build();
    }

    /**
     * Inserts the dummy data into the database if it is currently empty.
     */
    private void populateInitialData() {
        if (term().count() == 0) {
            beginTransaction();
            try {
                //Add five terms
                for (int i = 0; i < Term.TERMS.length; i++) {
                    Term term = new Term();
                    term.setTitle(Term.TERMS[i]);
                    term.setStartDate(System.currentTimeMillis() + (2592000000L * i)); //2592000000 is one month
                    term.setEndDate(System.currentTimeMillis() + (2592000000L * (i * 2))); //5184000000 is two months
                    term().insert(term);
                }

                //Add one course for each term
                for (int i = 0; i < Term.TERMS.length; i++) {
                    Course course = new Course();
                    course.setTitle(Course.COURSES[i]);
                    course.setTermId(i + 1); //+1 because autogenerated IDs start at 1
                    course().insert(course);
                }

                //Add two notes to each course
                for (int i = 0; i < Term.TERMS.length; i++) {
                    Note note1 = new Note();
                    note1.setText("Hiya buddy " + Integer.toString(i));
                    note1.setCourseId(i + 1);
                    note().insert(note1);

                    Note note2 = new Note();
                    note2.setText("\"\"You miss 100% of the shots you don't take - Wayne Gretzky\" - Michael Scott\" " + Integer.toString(i));
                    note2.setCourseId(i + 1);
                    note().insert(note2);
                }

                //Add one assessment to each course
                for (int i = 0; i < Term.TERMS.length; i++) {
                    Assessment assessment = new Assessment();
                    assessment.setType("Objective"); //Needs to match up with R.string.objective_assessment
                    assessment.setCourseId(i + 1);
                    assessment().insert(assessment);
                }

                setTransactionSuccessful();
            } finally {
                endTransaction();
            }
        }
    }
}
